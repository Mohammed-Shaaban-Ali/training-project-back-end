

import { 
  ArrayUnique,
  IsArray,
  IsDefined,
  IsEmail, IsEmpty, IsEnum, IsMongoId, IsNotEmpty, IsOptional, IsString, Length, MaxLength, maxLength, MinLength, 
  ValidateNested
} from 'class-validator';
import { Transform, Type } from 'class-transformer';
import { ProfileSettingsDto } from './profileSettings.dto';
import { Types } from 'mongoose';
import { Gender, Title, UserStatus, UserType } from 'src/enums/shared.enums';


const trim = (value: any) => (typeof value === 'string' ? value.trim() : value);
const trimLower = (Value: any) => typeof Value === 'string' ? Value.trim().toLowerCase() : Value;

export class CreateUserDto {

   // System-managed fields must NOT be supplied by clients
  @IsEmpty({ message: 'userNo is generated by the system' })
  userNo?: any;

  @IsOptional()
  @IsString()
  @IsEnum(Title)
  title?: Title;

  @IsEnum(Gender)
  gender: Gender;

  @IsString()
  @Length(2, 15)
  @Transform(({ value }) => trim(value))
  firstName: string;

  @IsString()
  @Length(2, 15)
  @Transform(({ value }) => trim(value))
  lastName: string;

  @IsOptional()
  @IsString()
  @Length(2, 15)
  @Transform(({ value }) => trim(value))
  middleName?: string;

  @IsNotEmpty()
  @IsEmail()
  @Transform(({ value }) => trimLower(value))
  email: string;

  @IsNotEmpty()
  @IsString()
  @MinLength(8)
  hashedPassword: string;

  @IsOptional()
  @IsString()
  refreshToken?: string;

  @IsNotEmpty()
  @IsString()
  @IsEnum(UserType)
  userType: UserType;

  @IsOptional()
  @IsArray()
  @IsString({ each: true })
  @ArrayUnique()
  @Transform(({ value }) =>
    Array.isArray(value)
      ? value.map((s: any) => String(s).trim()).filter(Boolean)
      : value,
  )
  permissions?: string[];

  @IsDefined()
  @ValidateNested()
  @IsNotEmpty()
  @Type(() => ProfileSettingsDto)
  profileSettings: ProfileSettingsDto;

  @IsOptional()
  @IsArray()
  @IsMongoId({ each: true })
  courses?: Types.ObjectId[];

  @IsOptional()
  @IsEnum(UserStatus)
  status?: UserStatus;

  @IsOptional()
  deletedAt?: Date;
}
